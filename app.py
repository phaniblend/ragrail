from flask import Flask, request, jsonify, send_from_directory
from flask_cors import CORS
import os
import logging
import base64
import json
import uuid
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Create Flask app
app = Flask(__name__, static_folder='static', static_url_path='')
CORS(app)

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@app.route('/')
def index():
    """Serve the main documentation page"""
    return send_from_directory('static', 'main_docs.html')

@app.route('/api/smart-test', methods=['POST'])
def smart_test_proxy():
    """Pure middleman - just proxy to hosted Cursor AI"""
    try:
        data = request.get_json()
        component_code = data.get("component_code", "")
        action = data.get("action", "generate")
        
        logger.info(f"Proxying request to Cursor AI - Action: {action}")
        
        if not component_code:
            return jsonify({'error': 'Component code is required'}), 400
        
        # Pure proxy to hosted Cursor AI - no local processing
        result = proxy_to_cursor_ai(component_code, action)
        
        if result:
            return jsonify(result)
        else:
            return jsonify({
                'success': False,
                'error': 'Cursor AI service unavailable'
            }), 500
        
    except Exception as e:
        logger.error(f"Proxy error: {str(e)}")
        return jsonify({
            'success': False,
            'error': f"Proxy failed: {str(e)}"
        }), 500

def proxy_to_cursor_ai(component_code, action):
    """Pure proxy function - just forwards to Cursor AI"""
    try:
        import requests
        
        # Get hosted Cursor AI URL
        cursor_url = os.getenv('CURSOR_PROXY_URL', 'https://your-cursor-ai.onrender.com')
        
        logger.info(f"üîÑ Forwarding to Cursor AI at {cursor_url}")
        
        # Forward request to hosted Cursor AI
        response = requests.post(
            f"{cursor_url}/api/cursor/analyze",
            json={
                'component_code': component_code,
                'task_type': 'test_generation',
                'action': action,
                'session_id': str(uuid.uuid4())
            },
            timeout=120,
            headers={'Content-Type': 'application/json'}
        )
        
        if response.status_code == 200:
            data = response.json()
            logger.info(f"‚úÖ Cursor AI responded successfully")
            
            # Just forward the response
            return {
                'success': data.get('success', True),
                'tests': data.get('analysis', ''),
                'analysis': f'Generated by Cursor AI ({data.get("service_used", "unknown")})',
                'coverage_estimate': '90%+'
            }
        else:
            logger.warning(f"‚ö†Ô∏è Cursor AI returned {response.status_code}")
            return None
        
    except Exception as e:
        logger.warning(f"Cursor AI proxy error: {e}")
        return None

@app.route('/health')
def health_check():
    """Health check"""
    return jsonify({
        'status': 'healthy',
        'service': 'middleman-proxy',
        'cursor_proxy_url': os.getenv('CURSOR_PROXY_URL', 'not-configured'),
        'mode': 'pure-proxy'
    })

if __name__ == '__main__':
    print("üé≠ Starting Disguising Middleman Proxy")
    print("=====================================")
    print(f"üîÑ Cursor AI URL: {os.getenv('CURSOR_PROXY_URL', 'Not configured')}")
    print("üéØ Mode: Pure proxy - no local processing")
    print("üïµÔ∏è All intelligence comes from Cursor AI")
    
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 5000)), debug=False)
